export declare const speechRecScript = "\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Speech Recognition Script</title>\n  </head>\n  <body>\n    <script>\n      let finalizedTranscript = \"\";\n      let transcriptResult = \"\";\n      let isListening = false;\n\n      // Check for browser compatibility\n      window.SpeechRecognition =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      window.SpeechGrammarList =\n        window.SpeechGrammarList || window.webkitSpeechGrammarList;\n      window.SpeechRecognitionEvent =\n        window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;\n\n      if (\"SpeechRecognition\" in window) {\n        let recognition = new SpeechRecognition();\n        recognition.interimResults = true; // Get interim results\n\n        let isManualStop = false;\n\n        recognition.addEventListener(\"start\", (event) => {\n          if (!isListening) {\n            isListening = true;\n            window.ReactNativeWebView.postMessage(\n              JSON.stringify({\n                type: \"SpeechRecognitionStarted\",\n                data: {},\n              })\n            );\n          }\n        });\n\n        recognition.addEventListener(\"result\", (event) => {\n          let interimTranscript = \"\";\n          for (let i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal) {\n              finalizedTranscript += \" \" + event.results[i][0].transcript;\n            } else {\n              interimTranscript += event.results[i][0].transcript;\n            }\n          }\n\n          transcriptResult = finalizedTranscript + \" \" + interimTranscript;\n\n          window.ReactNativeWebView.postMessage(\n            JSON.stringify({\n              type: \"SpeechRecognitionRealTimeResult\",\n              data: transcriptResult,\n            })\n          );\n        });\n\n        recognition.addEventListener(\"end\", () => {\n          // If the speech recognition is ended because the speech rec engine decided that\n          // the user finishes speaking (e.g., user kept silent for a few seconds), we restart\n          // the speech rec process\n          if (!isManualStop) {\n            recognition.start();\n          } else {\n            isListening = false;\n\n            window.ReactNativeWebView.postMessage(\n              JSON.stringify({\n                type: \"SpeechRecognitionEnd\",\n                data: transcriptResult,\n              })\n            );\n          }\n        });\n\n        recognition.addEventListener(\"error\", (event) => {\n          window.ReactNativeWebView.postMessage(\n            JSON.stringify({\n              type: \"SpeechRecognitionError\",\n              data: {\n                code: event.error,\n                errorMessage: event.message,\n              },\n            })\n          );\n        });\n\n        window.handleNativeEvent = function (message) {\n          switch (message.type) {\n            case \"StartSpeechRecognition\":\n              isManualStop = false;\n              isListening = false; // this will be set to true in start event listener\n              finalizedTranscript = \"\";\n              transcriptResult = \"\";\n\n              recognition.lang = message.data.language;\n              recognition.start();\n              break;\n\n            case \"StopSpeechRecognition\":\n              isManualStop = true;\n              recognition.stop();\n\n              break;\n\n            case \"CancelSpeechRecognition\":\n              isManualStop = true;\n              recognition.abort();\n\n              break;\n\n            default:\n              console.error(\"Unhandled WebView message type: \", message.type);\n              break;\n          }\n        };\n      }\n    </script>\n  </body>\n</html>\n";
//# sourceMappingURL=speechRecScript.d.ts.map